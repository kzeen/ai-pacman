Q1:
The goal is to find a path from the start position to a goal location by exploring the deepest nodes in the search graph first. DFS was used with graph search, using a Stack for the fringe and a set for the visited nodes. The list of actions is carried along with each state in order to reconstruct the path when the goal is found.

Running python pacman.py -l tinyMaze -p SearchAgent finds a path of cost 10 by expanding 15 nodes
Running python pacman.py -l mediumMaze -p SearchAgent finds a path of cost 130 by expanding 146 nodes
Running python pacman.py -l bigMaze -z .5 -p SearchAgent finds a path of cost 210 by expanding 390 nodes

The exploration order is as expected, expanding the deepest left-most nodes first and then moving to the right, which is most apparent in the mediumMaze. This maze also shows that Pacman does not necessarily go to all explored states on his way to the goal, however they are explored due to the systematic nature of the algorithm. The solution is not the least-cost solution, but it is correct in eventually reaching the goal if it exists.

Q2:
The goal is to find a path to the goal with the fewest number of actions by exploring nodes layer-by-layer. BFS was used with graph search, using a Queue for the fringe. The rest of the algorithm is the same as for DFS.

Running python pacman.py -l mediumMaze -p SearchAgent -a fn=bfs finds a path of cost 68 by expanding 269 nodes
Running python pacman.py -l bigMaze -p SearchAgent -a fn=bfs -z .5 finds a path of cost 210 by expanding 620 nodes
Running python eightpuzzle.py also consistently finds a solution

BFS does find a least cost solution, when step costs are all the same.

Q3:
The goal is to find a path to the goal that isn't necessarily the fewest-actions path, but best in other ways, using different cost functions. UCS will always expand the cheapest total-cost path first. It was implemented using a PriorityQueue for the fringe, with the state and path as the item, and the cumulative cost as the priority.

Running python pacman.py -l mediumMaze -p SearchAgent -a fn=ucs finds a path of cost 68 by expanding 269 nodes (same as BFS because all costs are the same)
Running python pacman.py -l mediumDottedMaze -p StayEastSearchAgent finds a path of cost 1 by expanding 186 nodes
Running python pacman.py -l mediumScaryMaze -p StayWestSearchAgent finds a path of cost 68719479864 by expanding 108 nodes


Q4:
The goal is to now use informed search strategies to reach the goal states. A* is used with graph search, using a PriorityQueue for the fringe. The evaluation function now accounts for the heuristic function as well as the cumulative cost. The rest of the algorithm is the same as for UCS.

Running python pacman.py -l bigMaze -z .5 -p SearchAgent -a fn=astar,heuristic=manhattanHeuristic finds a path of cost 210 by expanding 549 nodes

Q5:
The goal is now to implement a new search problem that requires pacman to visit all 4 corners of the maze. The state space does not record unnecessary information, as it only needs Pacman's current position as well as the ability to check which corners have already been visited. The latter is implemented as a list of booleans for each of the 4 corners. A state is a goal when all 4 corners have been visited.

Running python pacman.py -l tinyCorners -p SearchAgent -a fn=bfs,prob=CornersProblem finds a path of cost 28 by expanding 252 nodes
Running python pacman.py -l mediumCorners -p SearchAgent -a fn=bfs,prob=CornersProblem finds a path of cost 106 by expanding 1966 nodes

Q6:
The goal is to implement a non-trivial heuristic function for the CornersProblem, guiding A* with a heuristic that estimates cost to visit all corners. The heuristic is admissible and consistent because the max Manhattan distance to any unvisited corner is a lower bound on the total remaining cost, as we must reach the furthest one at minimum. 

Running python pacman.py -l mediumCorners -p AStarCornersAgent -z 0.5 finds a path of cost 106 by expanding 1136 nodes < 1966 nodes

Q7:
The goal is to implement a heuristic function for the FoodSearchProblem that aids Pacman in visiting all remaining food dots. The heuristic aims to estimate the remaining cost to collect all food. It computes the maze distance (true distance, accounting for walls) from the start position to the position of all dots on the board, and then takes the maximum of these distances because Pacman must eventually reach the furthest dot at some point, so it represents the minimum cost to do so. It is more accurate than using Manhattan distance because it accounts for walls. However it is slower to computer because it is running bfs for every food dot.

Running python pacman.py -l trickySearch -p AStarFoodSearchAgent finds a path of cost 60 by expanding 4137 nodes

Q8:
The goal is to implement a greedy agent that searches for and eats the closest food dot repeatedly. It does not compute an optimal path and instead finds the closest dot to it currently, eats it, and repeats until all food is gone. This is done by running BFS to find the path to the closest food dot given by AnyFoodSearchProblem.

Running python pacman.py -l bigSearch -p ClosestDotSearchAgent -z .5 finds a path of cost 350

